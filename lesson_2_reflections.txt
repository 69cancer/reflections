What happens when you initialize a repository? Why do you need to do it?
- It initializes a git repository. We can either initialize in a new directory 
  thats doesnt have been initialized with git, in these case git does not carry
  any commits when we create repository  or with the one that has been already 
  initialized with git, in these case it won’t affect the history of the commits.
  We need to do it to let the git track the history of our files in the repository.

How is the staging area different from the working directory and the repository? 
What value do you think it offers?
- The staging area is a file can be called as holding area, generally contained in 
  the Git directory, that stores information about what will go into the next commit.
  Staging area allows to control what parts of the working tree go into the 
  repository on the next "commit" operation.
  staging helps to split up one large change into multiple commits. Suppose We worked on a
  large change, involving a lot of files and quite a few different subtasks.Now the change
  is all tested and working, we need to commit all this properly, in several clean commits 
  each focused on one aspect of the code changes.

How can you use the staging area to make sure you have one commit per logical change?
- Staging area is holding area before we can make commit, so we only add those 
  files which have logically related changes and then we can commit it with appropriate commit 
  msg.  

What are some situations when branches would be helpful in keeping your history organized? 
How would branches help?
- Say you are working on a paper. You’ve gotten a first draft out, submitted for review. 
  You then get a new batch of data, and you’re in the process of integrating it into the paper. 
  Halfway in, however, the review committee calls you up and tells you that you need to change some 
  of your section headings to conform to format specifications. What do you do?Obviously you don’t 
  want to send them your half-baked revisions with corrected headings. What you want to do is jump 
  back to the version you sent out, change the headings on that version, and send off that copy, 
  all the while keeping your recent work safely stored somewhere else.This is the idea behind branching,
  and Git makes it easy to do.

How do the diagrams help you visualize the branch structure?
- Diagrams help to easily identify the reachability of any commits. It can help to pinpoint the parent
  relationship easily.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
- Merging two branches together make the changes in a commit taking in consideration of common 
  parent commit of the branches. If some of the code was deleted with respect to parent commit in any of the 
  branch then it will not be present in the final commit, even if it is present in other branch.
  We represent it in the diagram the way we do because it will layout a commit having the parent relationship
  with the both branches. Now we can delete the branch label that is merged except master.
