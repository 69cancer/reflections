When would you want to use a remote repository rather than keeping all your work local?
- We might have to use remote repository if we are working on a collaborated project.
  we also need it if we want to share our project with other users.
  It also helps to work on the project if our local machine is not available with us.
  at the time when we require to make some commits. Differences in github repository and
  local will be similar if we either push the changes from any another system or directly 
  from the github site. Sometimes another person working on our project might push the 
  commits to github repository.

Why might you want to always pull changes manually rather than having Git automatically stay 
up-to-date with your remote repository?
- Manually pulling gives users for options of when and what he want to incorporate in his 
  projects. In addition to master branch user can make pull in any of the branch.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
- Forks is clonning of repository from other github user to our own github repository. We use it
  when we have do collaborative modifications to thar repository.
  Clones is copying of repository from remote to local or locally from one location to another.
  We use it when we have to either modify or add some additional commits to exiting repo.
  Branches are copies of the master branch in a certain period of time when we have to 
  work on new features.

What is the benefit of having a copy of the last known state of the remote stored locally?
- It helps in a situation when both the remote and local repository has been added with new commits,
  and then we can git fetch remote commits to origin/master branch and then compare the master
  with origin/master, rectifying conflicts and then merging the origin/master and master.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
- We can collaborate with other version control systems like dropbox, google, etc. 
  But according to me GitHub will be the easiest one.

When would you want to make changes in a separate branch rather than directly in master? What 
benefits does each approach have?
- If I have a fully working master and I dont want to alter the working master without confirming wether
  the new feature or any new experiments on the project is working or not. In this case, if I
  have to add new features then I will make a new branch. If I am working on collaborated project then
  I will have to work for my part on a separate branch and then I can pull request and other can merge it
  if found working.

